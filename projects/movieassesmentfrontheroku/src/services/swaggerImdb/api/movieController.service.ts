/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { MovieResponse } from '../model/movieResponse';
import { SearchMovie } from '../model/searchMovie';

import { BASE_PATH_IMDB, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MovieControllerService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders({Authorization: 'Basic '+btoa("admin:admin")});
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH_IMDB) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * apiKey
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiKeyUsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public apiKeyUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public apiKeyUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public apiKeyUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/movieImdb/apikey`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getIdMovieImdbController
     *
     * @param i i
     * @param plot plot
     * @param r r
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIdMovieImdbControllerUsingGET(i: string, plot?: string, r?: string, observe?: 'body', reportProgress?: boolean): Observable<MovieResponse>;
    public getIdMovieImdbControllerUsingGET(i: string, plot?: string, r?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MovieResponse>>;
    public getIdMovieImdbControllerUsingGET(i: string, plot?: string, r?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MovieResponse>>;
    public getIdMovieImdbControllerUsingGET(i: string, plot?: string, r?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (i === null || i === undefined) {
            throw new Error('Required parameter i was null or undefined when calling getIdMovieImdbControllerUsingGET.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (i !== undefined && i !== null) {
            queryParameters = queryParameters.set('i', <any>i);
        }
        if (plot !== undefined && plot !== null) {
            queryParameters = queryParameters.set('plot', <any>plot);
        }
        if (r !== undefined && r !== null) {
            queryParameters = queryParameters.set('r', <any>r);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<MovieResponse>(`${this.basePath}/movieImdb/getIdParameter`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getMovieTitleController
     *
     * @param t t
     * @param plot plot
     * @param r r
     * @param type type
     * @param y y
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMovieTitleControllerUsingGET(t: string, plot?: string, r?: string, type?: string, y?: string, observe?: 'body', reportProgress?: boolean): Observable<MovieResponse>;
    public getMovieTitleControllerUsingGET(t: string, plot?: string, r?: string, type?: string, y?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MovieResponse>>;
    public getMovieTitleControllerUsingGET(t: string, plot?: string, r?: string, type?: string, y?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MovieResponse>>;
    public getMovieTitleControllerUsingGET(t: string, plot?: string, r?: string, type?: string, y?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (t === null || t === undefined) {
            throw new Error('Required parameter t was null or undefined when calling getMovieTitleControllerUsingGET.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (plot !== undefined && plot !== null) {
            queryParameters = queryParameters.set('plot', <any>plot);
        }
        if (r !== undefined && r !== null) {
            queryParameters = queryParameters.set('r', <any>r);
        }
        if (t !== undefined && t !== null) {
            queryParameters = queryParameters.set('t', <any>t);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (y !== undefined && y !== null) {
            queryParameters = queryParameters.set('y', <any>y);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<MovieResponse>(`${this.basePath}/movieImdb/getMovieTitle`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchListMovieParameterController
     *
     * @param s s
     * @param page page
     * @param r r
     * @param type type
     * @param y y
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchListMovieParameterControllerUsingGET(s: string, page?: string, r?: string, type?: string, y?: string, observe?: 'body', reportProgress?: boolean): Observable<SearchMovie>;
    public searchListMovieParameterControllerUsingGET(s: string, page?: string, r?: string, type?: string, y?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchMovie>>;
    public searchListMovieParameterControllerUsingGET(s: string, page?: string, r?: string, type?: string, y?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchMovie>>;
    public searchListMovieParameterControllerUsingGET(s: string, page?: string, r?: string, type?: string, y?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (s === null || s === undefined) {
            throw new Error('Required parameter s was null or undefined when calling searchListMovieParameterControllerUsingGET.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (r !== undefined && r !== null) {
            queryParameters = queryParameters.set('r', <any>r);
        }
        if (s !== undefined && s !== null) {
            queryParameters = queryParameters.set('s', <any>s);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (y !== undefined && y !== null) {
            queryParameters = queryParameters.set('y', <any>y);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SearchMovie>(`${this.basePath}/movieImdb/searchParameter`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
